/*
* generated by Xtext
*/
grammar InternalMapUI;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.istic.mapUI.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.istic.mapUI.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.istic.mapUI.services.MapUIGrammarAccess;

}

@parser::members {
 
 	private MapUIGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MapUIGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMapUI
entryRuleMapUI 
:
{ before(grammarAccess.getMapUIRule()); }
	 ruleMapUI
{ after(grammarAccess.getMapUIRule()); } 
	 EOF 
;

// Rule MapUI
ruleMapUI
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapUIAccess().getMappingsAssignment()); }
(rule__MapUI__MappingsAssignment)*
{ after(grammarAccess.getMapUIAccess().getMappingsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImage
entryRuleImage 
:
{ before(grammarAccess.getImageRule()); }
	 ruleImage
{ after(grammarAccess.getImageRule()); } 
	 EOF 
;

// Rule Image
ruleImage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImageAccess().getAlternatives()); }
(rule__Image__Alternatives)
{ after(grammarAccess.getImageAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheckBox
entryRuleCheckBox 
:
{ before(grammarAccess.getCheckBoxRule()); }
	 ruleCheckBox
{ after(grammarAccess.getCheckBoxRule()); } 
	 EOF 
;

// Rule CheckBox
ruleCheckBox
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckBoxAccess().getCheckBoxKeyword()); }

	'CheckBox' 

{ after(grammarAccess.getCheckBoxAccess().getCheckBoxKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRadioButton
entryRuleRadioButton 
:
{ before(grammarAccess.getRadioButtonRule()); }
	 ruleRadioButton
{ after(grammarAccess.getRadioButtonRule()); } 
	 EOF 
;

// Rule RadioButton
ruleRadioButton
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRadioButtonAccess().getRadioButtonKeyword()); }

	'RadioButton' 

{ after(grammarAccess.getRadioButtonAccess().getRadioButtonKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSon
entryRuleSon 
:
{ before(grammarAccess.getSonRule()); }
	 ruleSon
{ after(grammarAccess.getSonRule()); } 
	 EOF 
;

// Rule Son
ruleSon
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSonAccess().getAlternatives()); }
(rule__Son__Alternatives)
{ after(grammarAccess.getSonAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCheckBoxParserRuleCall_0()); }
	ruleCheckBox
{ after(grammarAccess.getTypeAccess().getCheckBoxParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRadioButtonParserRuleCall_1()); }
	ruleRadioButton
{ after(grammarAccess.getTypeAccess().getRadioButtonParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getImageParserRuleCall_2()); }
	ruleImage
{ after(grammarAccess.getTypeAccess().getImageParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSonParserRuleCall_3()); }
	ruleSon
{ after(grammarAccess.getTypeAccess().getSonParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageAccess().getImageCheckKeyword_0()); }

	'ImageCheck' 

{ after(grammarAccess.getImageAccess().getImageCheckKeyword_0()); }
)

    |(
{ before(grammarAccess.getImageAccess().getImageRadioKeyword_1()); }

	'ImageRadio' 

{ after(grammarAccess.getImageAccess().getImageRadioKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Son__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSonAccess().getSonCheckKeyword_0()); }

	'SonCheck' 

{ after(grammarAccess.getSonAccess().getSonCheckKeyword_0()); }
)

    |(
{ before(grammarAccess.getSonAccess().getSonRadioKeyword_1()); }

	'SonRadio' 

{ after(grammarAccess.getSonAccess().getSonRadioKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameAssignment_0()); }
(rule__Mapping__NameAssignment_0)
{ after(grammarAccess.getMappingAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getMappingAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getTypeAssignment_2()); }
(rule__Mapping__TypeAssignment_2)
{ after(grammarAccess.getMappingAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__MapUI__MappingsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapUIAccess().getMappingsMappingParserRuleCall_0()); }
	ruleMapping{ after(grammarAccess.getMapUIAccess().getMappingsMappingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMappingAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getMappingAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


