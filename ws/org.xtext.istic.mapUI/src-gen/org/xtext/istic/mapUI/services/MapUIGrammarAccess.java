/*
* generated by Xtext
*/
package org.xtext.istic.mapUI.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MapUIGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MapUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapUI");
		private final Assignment cMappingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_0 = (RuleCall)cMappingsAssignment.eContents().get(0);
		
		//MapUI:
		//	Mappings+=Mapping*;
		public ParserRule getRule() { return rule; }

		//Mappings+=Mapping*
		public Assignment getMappingsAssignment() { return cMappingsAssignment; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_0() { return cMappingsMappingParserRuleCall_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Mapping:
		//	name=ID ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRadioButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSonParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	CheckBox | RadioButton | Image | Son;
		public ParserRule getRule() { return rule; }

		//CheckBox | RadioButton | Image | Son
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckBox
		public RuleCall getCheckBoxParserRuleCall_0() { return cCheckBoxParserRuleCall_0; }

		//RadioButton
		public RuleCall getRadioButtonParserRuleCall_1() { return cRadioButtonParserRuleCall_1; }

		//Image
		public RuleCall getImageParserRuleCall_2() { return cImageParserRuleCall_2; }

		//Son
		public RuleCall getSonParserRuleCall_3() { return cSonParserRuleCall_3; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImageCheckKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cImageRadioKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Image:
		//	"ImageCheck" | "ImageRadio";
		public ParserRule getRule() { return rule; }

		//"ImageCheck" | "ImageRadio"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ImageCheck"
		public Keyword getImageCheckKeyword_0() { return cImageCheckKeyword_0; }

		//"ImageRadio"
		public Keyword getImageRadioKeyword_1() { return cImageRadioKeyword_1; }
	}

	public class CheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBox");
		private final Keyword cCheckBoxKeyword = (Keyword)rule.eContents().get(1);
		
		//CheckBox:
		//	"CheckBox";
		public ParserRule getRule() { return rule; }

		//"CheckBox"
		public Keyword getCheckBoxKeyword() { return cCheckBoxKeyword; }
	}

	public class RadioButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RadioButton");
		private final Keyword cRadioButtonKeyword = (Keyword)rule.eContents().get(1);
		
		//RadioButton:
		//	"RadioButton";
		public ParserRule getRule() { return rule; }

		//"RadioButton"
		public Keyword getRadioButtonKeyword() { return cRadioButtonKeyword; }
	}

	public class SonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Son");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSonCheckKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSonRadioKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Son:
		//	"SonCheck" | "SonRadio";
		public ParserRule getRule() { return rule; }

		//"SonCheck" | "SonRadio"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"SonCheck"
		public Keyword getSonCheckKeyword_0() { return cSonCheckKeyword_0; }

		//"SonRadio"
		public Keyword getSonRadioKeyword_1() { return cSonRadioKeyword_1; }
	}
	
	
	private MapUIElements pMapUI;
	private MappingElements pMapping;
	private TypeElements pType;
	private ImageElements pImage;
	private CheckBoxElements pCheckBox;
	private RadioButtonElements pRadioButton;
	private SonElements pSon;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MapUIGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.istic.mapUI.MapUI".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MapUI:
	//	Mappings+=Mapping*;
	public MapUIElements getMapUIAccess() {
		return (pMapUI != null) ? pMapUI : (pMapUI = new MapUIElements());
	}
	
	public ParserRule getMapUIRule() {
		return getMapUIAccess().getRule();
	}

	//Mapping:
	//	name=ID ":" type=Type;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//Type:
	//	CheckBox | RadioButton | Image | Son;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Image:
	//	"ImageCheck" | "ImageRadio";
	public ImageElements getImageAccess() {
		return (pImage != null) ? pImage : (pImage = new ImageElements());
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//CheckBox:
	//	"CheckBox";
	public CheckBoxElements getCheckBoxAccess() {
		return (pCheckBox != null) ? pCheckBox : (pCheckBox = new CheckBoxElements());
	}
	
	public ParserRule getCheckBoxRule() {
		return getCheckBoxAccess().getRule();
	}

	//RadioButton:
	//	"RadioButton";
	public RadioButtonElements getRadioButtonAccess() {
		return (pRadioButton != null) ? pRadioButton : (pRadioButton = new RadioButtonElements());
	}
	
	public ParserRule getRadioButtonRule() {
		return getRadioButtonAccess().getRule();
	}

	//Son:
	//	"SonCheck" | "SonRadio";
	public SonElements getSonAccess() {
		return (pSon != null) ? pSon : (pSon = new SonElements());
	}
	
	public ParserRule getSonRule() {
		return getSonAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
